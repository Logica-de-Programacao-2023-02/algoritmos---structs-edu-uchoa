1.Crie uma struct chamada Circulo com o campo "raio".
Escreva uma função que receba um Circulo como parâmetro e calcule a área do círculo (área = pi * raio * raio).
Dica: use a constante math.Pi para representar o número pi

package main
import (
	"fmt"
	"math"
)
type Circulo struct {
	raio float64
}
func calcArea(c Circulo) float64 {
	area := math.Pi * c.raio * c.raio
	return area
}

2.Crie uma struct chamada Pessoa com os campos "nome", "idade" e "endereço
O campo "endereço" deve ser uma outra struct com os campos "rua", "número", "cidade" e "estado".
Escreva uma função que receba uma Pessoa como parâmetro e imprima seu endereço completo.

package main
import "fmt"
type Endereco struct {
	Rua     string
	Numero  int
	Cidade  string
	Estado  string
}
type Pessoa struct {
	Nome    string
	Idade   int
	Endereco Endereco
}
func imprimir(p Pessoa) {
	fmt.Printf("Endereço de %s:\n", p.Nome)
	fmt.Printf("Rua: %s, Número: %d\nCidade: %s, Estado: %s\n", p.Endereco.Rua, p.Endereco.Numero, p.Endereco.Cidade, p.Endereco.Estado)
}

3.Crie uma struct chamada Triângulo com os campos "base" e "altura".
Escreva uma função que receba um Triângulo como parâmetro e calcule a área do triângulo (área = base * altura / 2).

package main
import "fmt"
type Triangulo struct {
	Base   float64
	Altura float64
}
func calcArea(t Triangulo) float64 {
	area := (t.Base * t.Altura) / 2
	return area
}

4.Crie uma struct chamada Playlist com os campos "nome" e "músicas". O campo "músicas" deve ser um slice de structs, 
cada uma representando uma música com os campos "título", "artista" e "duração". Escreva uma função que receba uma
Playlist como parâmetro e imprima o nome da playlist, 
o tempo total da playlist e as informações de cada música.

package main
import "fmt"
type Musica struct {
	Titulo  string
	Artista string
	Duracao int // Duracao em segundos
}
type Playlist struct {
	Nome    string
	Musicas []Musica
}
func imprimirInfoPlaylist(p Playlist) {
	fmt.Printf("Playlist: %s\n", p.Nome)
	for i, musica := range p.Musicas {
		fmt.Printf("Música %d:\n", i+1)
		fmt.Printf("  Título: %s\n", musica.Titulo)
		fmt.Printf("  Artista: %s\n", musica.Artista)
		fmt.Printf("  Duração: %d segundos\n", musica.Duracao)
	}
	tempoTotal := calcularTempoTotal(p.Musicas)
	fmt.Printf("Tempo total da playlist: %d segundos\n", tempoTotal)
}
func calcularTempoTotal(musicas []Musica) int {
	var tempoTotal int
	for _, musica := range musicas {
		tempoTotal += musica.Duracao
	}
	return tempoTotal
}

5.Usando as mesmas structs do exercício anterior,
escreva uma função que receba um título de música como parâmetro e retorne uma lista das
Playlists que possuem esse título.

func buscarPlaylistsPorTitulo(playlists []Playlist, tituloMusica string) []Playlist {
	var playlistsEncontradas []Playlist

	for _, playlist := range playlists {
		for _, musica := range playlist.Musicas {
			if musica.Titulo == tituloMusica {
				playlistsEncontradas = append(playlistsEncontradas, playlist)
				break
			}
		}
	}

	return playlistsEncontradas
}

6.Crie uma struct chamada Funcionário com os campos "nome", "salário" e "idade". 
Escreva funções que permitam aumentar ou diminuir o salário do funcionário em uma determinada
porcentagem e uma função que calcule o tempo de serviço do funcionário
(considerando que ele começou a trabalhar aos 18 anos).

package main
import "fmt"
type Funcionario struct {
	Nome    string
	Salario float64
	Idade   int
}
func aumentarSalario(f *Funcionario, percentual float64) {
	aumento := f.Salario * (percentual / 100)
	f.Salario += aumento
}
func diminuirSalario(f *Funcionario, percentual float64) {
	desconto := f.Salario * (percentual / 100)
	f.Salario -= desconto
}
func calcularTempoServico(f Funcionario) int {
	idadeInicioTrabalho := 18
	anosDeServico := f.Idade - idadeInicioTrabalho
	return anosDeServico
}

7.Crie uma struct chamada Animal com os campos "nome", "espécie", "idade" e "som".
Escreva funções que permitam modificar o som que o animal
faz e uma função que imprima as informações do animal e o som que ele faz.

package main
import "fmt"
type Animal struct {
	Nome   string
	Especie string
	Idade  int
	Som    string
}
func modifSom(a *Animal, novoSom string) {
	a.Som = novoSom
}
func imprimirInfo(a Animal) {
	fmt.Printf("Nome: %s\n", a.Nome)
	fmt.Printf("Espécie: %s\n", a.Especie)
	fmt.Printf("Idade: %d anos\n", a.Idade)
	fmt.Printf("Som que faz: %s\n", a.Som)
}

8.Crie uma struct chamada Viagem com os campos "origem", 
"destino", "data" e "preço". Escreva uma função que receba um 
slice de Viagens como parâmetro e retorne a viagem mais cara.

package main
import "fmt"
type Viagem struct {
	Origem  string
	Destino string
	Data    string
	Preco   float64
}
func viagemMaisCara(viagens []Viagem) Viagem {
	if len(viagens) == 0 {
		// Retorna uma Viagem vazia se o slice estiver vazio
		return Viagem{}
	}
	viagemMaisCara := viagens[0]
	for _, viagem := range viagens {
		if viagem.Preco > viagemMaisCara.Preco {
			viagemMaisCara = viagem
		}
	}
	return viagemMaisCara
}

9.Crie uma struct chamada Aluno com os campos "nome", "idade" e "notas". 
O campo "notas" deve ser um slice de float64, representando as notas que o
aluno tirou em uma determinada disciplina. Escreva funções que permitam adicionar
ou remover notas do aluno, calcular a média das notas e imprimir o nome, idade e média do aluno.

package main
import "fmt"
type Aluno struct {
	Nome  string
	Idade int
	Notas []float64
}
func adicionarNota(a *Aluno, nota float64) {
	a.Notas = append(a.Notas, nota)
}
func removerUltimaNota(a *Aluno) {
	if len(a.Notas) > 0 {
		a.Notas = a.Notas[:len(a.Notas)-1]
	}
}
func calcularMedia(a Aluno) float64 {
	if len(a.Notas) == 0 {
		return 0.0
	}

	soma := 0.0
	for _, nota := range a.Notas {
		soma += nota
	}

	return soma / float64(len(a.Notas))
}
func imprimirInfoAluno(a Aluno) {
	fmt.Printf("Nome: %s\n", a.Nome)
	fmt.Printf("Idade: %d anos\n", a.Idade)
	fmt.Printf("Média das notas: %.2f\n", calcularMedia(a))
}

10.Crie uma struct chamada Filme com os campos "título", "diretor", "ano" e "avaliações".
O campo "avaliações" deve ser um slice de inteiros representando as notas que o filme recebeu dos espectadores.
Escreva funções que permitam adicionar ou remover avaliações 
do filme, calcular a média das avaliações e imprimir as informações do filme e sua média de avaliações.

package main
import "fmt"
type Filme struct {
	Titulo      string
	Diretor     string
	Ano         int
	Avaliacoes  []int
}
func addAvaliacao(f *Filme, avaliacao int) {
	f.Avaliacoes = append(f.Avaliacoes, avaliacao)
}
func removerUltAvaliacao(f *Filme) {
	if len(f.Avaliacoes) > 0 {
		f.Avaliacoes = f.Avaliacoes[:len(f.Avaliacoes)-1]
	}
}
func calcMediaAvaliacoes(f Filme) float64 {
	if len(f.Avaliacoes) == 0 {
		return 0.0
	}

	soma := 0
	for _, avaliacao := range f.Avaliacoes {
		soma += avaliacao
	}

	return float64(soma) / float64(len(f.Avaliacoes))
}
func imprimirInfoFilme(f Filme) {
	fmt.Printf("Título: %s\n", f.Titulo)
	fmt.Printf("Diretor: %s\n", f.Diretor)
	fmt.Printf("Ano: %d\n", f.Ano)
	fmt.Printf("Média das avaliações: %.2f\n", calcMediaAvaliacoes(f))
}
